/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter add_pb_suffix,eslint_disable,ts_nocheck,keep_enum_prefix,long_type_number
// @generated from protobuf file "tdex-daemon/v2/wallet.proto" (package "tdex_daemon.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { WalletService } from "./wallet_pb";
import type { GetInfoResponse } from "./wallet_pb";
import type { GetInfoRequest } from "./wallet_pb";
import type { GetStatusResponse } from "./wallet_pb";
import type { GetStatusRequest } from "./wallet_pb";
import type { ChangePasswordResponse } from "./wallet_pb";
import type { ChangePasswordRequest } from "./wallet_pb";
import type { LockWalletResponse } from "./wallet_pb";
import type { LockWalletRequest } from "./wallet_pb";
import type { UnlockWalletResponse } from "./wallet_pb";
import type { UnlockWalletRequest } from "./wallet_pb";
import type { InitWalletResponse } from "./wallet_pb";
import type { InitWalletRequest } from "./wallet_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GenSeedResponse } from "./wallet_pb";
import type { GenSeedRequest } from "./wallet_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 *
 * Service for operators to manage the internal wallet of the daemon
 *
 * @generated from protobuf service tdex_daemon.v2.WalletService
 */
export interface IWalletServiceClient {
    /**
     * GenSeed is the first method that should be used to instantiate a new tdexd
     * instance. This method allows a caller to generate a new HD Wallet.
     * Once the seed is obtained and verified by the user, the InitWallet
     * method should be used to commit the newly generated seed, and create the
     * wallet.
     *
     * @generated from protobuf rpc: GenSeed(tdex_daemon.v2.GenSeedRequest) returns (tdex_daemon.v2.GenSeedResponse);
     */
    genSeed(input: GenSeedRequest, options?: RpcOptions): UnaryCall<GenSeedRequest, GenSeedResponse>;
    /**
     * InitWallet is used when tdexd is starting up for the first time to fully
     * initialize the daemon and its internal wallet.
     * The wallet in the tdexd context is a database file on the disk that can be
     * found in the configured data directory.
     * At the very least a mnemonic and a wallet password must be provided to this
     * RPC. The latter will be used to encrypt sensitive material on disk.
     * Once initialized the wallet is locked and since the password is never stored
     * on the disk, it's required to pass it into the Unlock RPC request to be able
     * to manage the daemon for operations like depositing funds or opening a market.
     *
     * @generated from protobuf rpc: InitWallet(tdex_daemon.v2.InitWalletRequest) returns (stream tdex_daemon.v2.InitWalletResponse);
     */
    initWallet(input: InitWalletRequest, options?: RpcOptions): ServerStreamingCall<InitWalletRequest, InitWalletResponse>;
    /**
     * UnlockWallet is used at startup of tdexd to provide a password to unlock
     * the wallet.
     *
     * @generated from protobuf rpc: UnlockWallet(tdex_daemon.v2.UnlockWalletRequest) returns (tdex_daemon.v2.UnlockWalletResponse);
     */
    unlockWallet(input: UnlockWalletRequest, options?: RpcOptions): UnaryCall<UnlockWalletRequest, UnlockWalletResponse>;
    /**
     * LockWallet can be used to lock tdexd and disable any operation but those
     * provided by this service.
     *
     * @generated from protobuf rpc: LockWallet(tdex_daemon.v2.LockWalletRequest) returns (tdex_daemon.v2.LockWalletResponse);
     */
    lockWallet(input: LockWalletRequest, options?: RpcOptions): UnaryCall<LockWalletRequest, LockWalletResponse>;
    /**
     * ChangePassword changes the password of the encrypted wallet. This RPC
     * requires the internal wallet to be locked. It doesn't change the wallet state
     * in any case, therefore, like after calling InitWallet, it is required to
     * unlock the walket with UnlockWallet RPC after this operation succeeds.
     *
     * @generated from protobuf rpc: ChangePassword(tdex_daemon.v2.ChangePasswordRequest) returns (tdex_daemon.v2.ChangePasswordResponse);
     */
    changePassword(input: ChangePasswordRequest, options?: RpcOptions): UnaryCall<ChangePasswordRequest, ChangePasswordResponse>;
    /**
     * GetStatus is useful for external applications interacting with tdexd to know
     * whether its ready, meaning that also the wallet, operator trade services
     * are able to serve requests.
     * Restarting tdexd or initiliazing it by restoring an existing wallet can be
     * time-expensive operations causing tdexd to not be ready until they haven't
     * finished.
     *
     * @generated from protobuf rpc: GetStatus(tdex_daemon.v2.GetStatusRequest) returns (tdex_daemon.v2.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse>;
    /**
     * GetInfo returns info about the configuration and the internal wallet of tdexd.
     *
     * @generated from protobuf rpc: GetInfo(tdex_daemon.v2.GetInfoRequest) returns (tdex_daemon.v2.GetInfoResponse);
     */
    getInfo(input: GetInfoRequest, options?: RpcOptions): UnaryCall<GetInfoRequest, GetInfoResponse>;
}
/**
 *
 * Service for operators to manage the internal wallet of the daemon
 *
 * @generated from protobuf service tdex_daemon.v2.WalletService
 */
export class WalletServiceClient implements IWalletServiceClient, ServiceInfo {
    typeName = WalletService.typeName;
    methods = WalletService.methods;
    options = WalletService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GenSeed is the first method that should be used to instantiate a new tdexd
     * instance. This method allows a caller to generate a new HD Wallet.
     * Once the seed is obtained and verified by the user, the InitWallet
     * method should be used to commit the newly generated seed, and create the
     * wallet.
     *
     * @generated from protobuf rpc: GenSeed(tdex_daemon.v2.GenSeedRequest) returns (tdex_daemon.v2.GenSeedResponse);
     */
    genSeed(input: GenSeedRequest, options?: RpcOptions): UnaryCall<GenSeedRequest, GenSeedResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenSeedRequest, GenSeedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * InitWallet is used when tdexd is starting up for the first time to fully
     * initialize the daemon and its internal wallet.
     * The wallet in the tdexd context is a database file on the disk that can be
     * found in the configured data directory.
     * At the very least a mnemonic and a wallet password must be provided to this
     * RPC. The latter will be used to encrypt sensitive material on disk.
     * Once initialized the wallet is locked and since the password is never stored
     * on the disk, it's required to pass it into the Unlock RPC request to be able
     * to manage the daemon for operations like depositing funds or opening a market.
     *
     * @generated from protobuf rpc: InitWallet(tdex_daemon.v2.InitWalletRequest) returns (stream tdex_daemon.v2.InitWalletResponse);
     */
    initWallet(input: InitWalletRequest, options?: RpcOptions): ServerStreamingCall<InitWalletRequest, InitWalletResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<InitWalletRequest, InitWalletResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * UnlockWallet is used at startup of tdexd to provide a password to unlock
     * the wallet.
     *
     * @generated from protobuf rpc: UnlockWallet(tdex_daemon.v2.UnlockWalletRequest) returns (tdex_daemon.v2.UnlockWalletResponse);
     */
    unlockWallet(input: UnlockWalletRequest, options?: RpcOptions): UnaryCall<UnlockWalletRequest, UnlockWalletResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UnlockWalletRequest, UnlockWalletResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * LockWallet can be used to lock tdexd and disable any operation but those
     * provided by this service.
     *
     * @generated from protobuf rpc: LockWallet(tdex_daemon.v2.LockWalletRequest) returns (tdex_daemon.v2.LockWalletResponse);
     */
    lockWallet(input: LockWalletRequest, options?: RpcOptions): UnaryCall<LockWalletRequest, LockWalletResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<LockWalletRequest, LockWalletResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ChangePassword changes the password of the encrypted wallet. This RPC
     * requires the internal wallet to be locked. It doesn't change the wallet state
     * in any case, therefore, like after calling InitWallet, it is required to
     * unlock the walket with UnlockWallet RPC after this operation succeeds.
     *
     * @generated from protobuf rpc: ChangePassword(tdex_daemon.v2.ChangePasswordRequest) returns (tdex_daemon.v2.ChangePasswordResponse);
     */
    changePassword(input: ChangePasswordRequest, options?: RpcOptions): UnaryCall<ChangePasswordRequest, ChangePasswordResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChangePasswordRequest, ChangePasswordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetStatus is useful for external applications interacting with tdexd to know
     * whether its ready, meaning that also the wallet, operator trade services
     * are able to serve requests.
     * Restarting tdexd or initiliazing it by restoring an existing wallet can be
     * time-expensive operations causing tdexd to not be ready until they haven't
     * finished.
     *
     * @generated from protobuf rpc: GetStatus(tdex_daemon.v2.GetStatusRequest) returns (tdex_daemon.v2.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusRequest, GetStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetInfo returns info about the configuration and the internal wallet of tdexd.
     *
     * @generated from protobuf rpc: GetInfo(tdex_daemon.v2.GetInfoRequest) returns (tdex_daemon.v2.GetInfoResponse);
     */
    getInfo(input: GetInfoRequest, options?: RpcOptions): UnaryCall<GetInfoRequest, GetInfoResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetInfoRequest, GetInfoResponse>("unary", this._transport, method, opt, input);
    }
}
