/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter add_pb_suffix,eslint_disable,ts_nocheck,keep_enum_prefix,long_type_number
// @generated from protobuf file "tdex-daemon/v2/wallet.proto" (package "tdex_daemon.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AccountInfo } from "./types_pb";
/**
 * @generated from protobuf message tdex_daemon.v2.GenSeedRequest
 */
export interface GenSeedRequest {
}
/**
 * @generated from protobuf message tdex_daemon.v2.GenSeedResponse
 */
export interface GenSeedResponse {
    /**
     * @generated from protobuf field: repeated string seed_mnemonic = 1;
     */
    seedMnemonic: string[];
}
/**
 * @generated from protobuf message tdex_daemon.v2.InitWalletRequest
 */
export interface InitWalletRequest {
    /**
     * wallet_password is the passphrase that should be used to encrypt the
     * wallet. This MUST be at least 8 chars in length. After creation, this
     * password is required to unlock/lock the daemon.
     *
     * @generated from protobuf field: string password = 1;
     */
    password: string;
    /**
     * seed_mnemonic is a 24-word mnemonic that encodes a prior seed obtained by the
     * user. This MUST be a generated by the GenSeed method
     *
     * @generated from protobuf field: repeated string seed_mnemonic = 2;
     */
    seedMnemonic: string[];
    /**
     * the flag to let the daemon restore existing funds for the wallet.
     *
     * @generated from protobuf field: bool restore = 3;
     */
    restore: boolean;
}
/**
 * @generated from protobuf message tdex_daemon.v2.InitWalletResponse
 */
export interface InitWalletResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message tdex_daemon.v2.UnlockWalletRequest
 */
export interface UnlockWalletRequest {
    /**
     * The unlocking password.
     *
     * @generated from protobuf field: string password = 1;
     */
    password: string;
}
/**
 * @generated from protobuf message tdex_daemon.v2.UnlockWalletResponse
 */
export interface UnlockWalletResponse {
}
/**
 * @generated from protobuf message tdex_daemon.v2.LockWalletRequest
 */
export interface LockWalletRequest {
    /**
     * The unlocking password.
     *
     * @generated from protobuf field: string password = 1;
     */
    password: string;
}
/**
 * @generated from protobuf message tdex_daemon.v2.LockWalletResponse
 */
export interface LockWalletResponse {
}
/**
 * @generated from protobuf message tdex_daemon.v2.ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * Current unlocking password.
     *
     * @generated from protobuf field: string current_password = 1;
     */
    currentPassword: string;
    /**
     * New unlocking password.
     *
     * @generated from protobuf field: string new_password = 2;
     */
    newPassword: string;
}
/**
 * @generated from protobuf message tdex_daemon.v2.ChangePasswordResponse
 */
export interface ChangePasswordResponse {
}
/**
 * @generated from protobuf message tdex_daemon.v2.GetStatusRequest
 */
export interface GetStatusRequest {
}
/**
 * @generated from protobuf message tdex_daemon.v2.GetStatusResponse
 */
export interface GetStatusResponse {
    /**
     * whether the daemon is initialized with an HD wallet.
     *
     * @generated from protobuf field: bool initialized = 1;
     */
    initialized: boolean;
    /**
     * whether the daemon's wallet is unlocked.
     *
     * @generated from protobuf field: bool unlocked = 2;
     */
    unlocked: boolean;
    /**
     * whether the daemon's wallet utxo set is up-to-date'.
     *
     * @generated from protobuf field: bool synced = 3;
     */
    synced: boolean;
}
/**
 * @generated from protobuf message tdex_daemon.v2.GetInfoRequest
 */
export interface GetInfoRequest {
}
/**
 * @generated from protobuf message tdex_daemon.v2.GetInfoResponse
 */
export interface GetInfoResponse {
    /**
     * The root path of the wallet of the daemon.
     *
     * @generated from protobuf field: string root_path = 1;
     */
    rootPath: string;
    /**
     * The SLIP-77 master blinding key from which every keypair is derived.
     *
     * @generated from protobuf field: string master_blinding_key = 2;
     */
    masterBlindingKey: string;
    /**
     * The list of info related to every account.
     *
     * @generated from protobuf field: repeated tdex_daemon.v2.AccountInfo account_info = 3;
     */
    accountInfo: AccountInfo[];
    /**
     * Network daemon running on
     *
     * @generated from protobuf field: string network = 4;
     */
    network: string;
    /**
     * Daemon build information
     *
     * @generated from protobuf field: tdex_daemon.v2.BuildInfo build_data = 5;
     */
    buildData?: BuildInfo;
}
/**
 * @generated from protobuf message tdex_daemon.v2.BuildInfo
 */
export interface BuildInfo {
    /**
     * Version
     *
     * @generated from protobuf field: string version = 1;
     */
    version: string;
    /**
     * Commit
     *
     * @generated from protobuf field: string commit = 2;
     */
    commit: string;
    /**
     * Date
     *
     * @generated from protobuf field: string date = 3;
     */
    date: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GenSeedRequest$Type extends MessageType<GenSeedRequest> {
    constructor() {
        super("tdex_daemon.v2.GenSeedRequest", []);
    }
    create(value?: PartialMessage<GenSeedRequest>): GenSeedRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenSeedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenSeedRequest): GenSeedRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GenSeedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.GenSeedRequest
 */
export const GenSeedRequest = new GenSeedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenSeedResponse$Type extends MessageType<GenSeedResponse> {
    constructor() {
        super("tdex_daemon.v2.GenSeedResponse", [
            { no: 1, name: "seed_mnemonic", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GenSeedResponse>): GenSeedResponse {
        const message = { seedMnemonic: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenSeedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenSeedResponse): GenSeedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string seed_mnemonic */ 1:
                    message.seedMnemonic.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenSeedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string seed_mnemonic = 1; */
        for (let i = 0; i < message.seedMnemonic.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.seedMnemonic[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.GenSeedResponse
 */
export const GenSeedResponse = new GenSeedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitWalletRequest$Type extends MessageType<InitWalletRequest> {
    constructor() {
        super("tdex_daemon.v2.InitWalletRequest", [
            { no: 1, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "seed_mnemonic", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "restore", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<InitWalletRequest>): InitWalletRequest {
        const message = { password: "", seedMnemonic: [], restore: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InitWalletRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitWalletRequest): InitWalletRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string password */ 1:
                    message.password = reader.string();
                    break;
                case /* repeated string seed_mnemonic */ 2:
                    message.seedMnemonic.push(reader.string());
                    break;
                case /* bool restore */ 3:
                    message.restore = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitWalletRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string password = 1; */
        if (message.password !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.password);
        /* repeated string seed_mnemonic = 2; */
        for (let i = 0; i < message.seedMnemonic.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.seedMnemonic[i]);
        /* bool restore = 3; */
        if (message.restore !== false)
            writer.tag(3, WireType.Varint).bool(message.restore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.InitWalletRequest
 */
export const InitWalletRequest = new InitWalletRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitWalletResponse$Type extends MessageType<InitWalletResponse> {
    constructor() {
        super("tdex_daemon.v2.InitWalletResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InitWalletResponse>): InitWalletResponse {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InitWalletResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitWalletResponse): InitWalletResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitWalletResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.InitWalletResponse
 */
export const InitWalletResponse = new InitWalletResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnlockWalletRequest$Type extends MessageType<UnlockWalletRequest> {
    constructor() {
        super("tdex_daemon.v2.UnlockWalletRequest", [
            { no: 1, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnlockWalletRequest>): UnlockWalletRequest {
        const message = { password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnlockWalletRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlockWalletRequest): UnlockWalletRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string password */ 1:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnlockWalletRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string password = 1; */
        if (message.password !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.UnlockWalletRequest
 */
export const UnlockWalletRequest = new UnlockWalletRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnlockWalletResponse$Type extends MessageType<UnlockWalletResponse> {
    constructor() {
        super("tdex_daemon.v2.UnlockWalletResponse", []);
    }
    create(value?: PartialMessage<UnlockWalletResponse>): UnlockWalletResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnlockWalletResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlockWalletResponse): UnlockWalletResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UnlockWalletResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.UnlockWalletResponse
 */
export const UnlockWalletResponse = new UnlockWalletResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LockWalletRequest$Type extends MessageType<LockWalletRequest> {
    constructor() {
        super("tdex_daemon.v2.LockWalletRequest", [
            { no: 1, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LockWalletRequest>): LockWalletRequest {
        const message = { password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LockWalletRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LockWalletRequest): LockWalletRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string password */ 1:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LockWalletRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string password = 1; */
        if (message.password !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.LockWalletRequest
 */
export const LockWalletRequest = new LockWalletRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LockWalletResponse$Type extends MessageType<LockWalletResponse> {
    constructor() {
        super("tdex_daemon.v2.LockWalletResponse", []);
    }
    create(value?: PartialMessage<LockWalletResponse>): LockWalletResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LockWalletResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LockWalletResponse): LockWalletResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LockWalletResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.LockWalletResponse
 */
export const LockWalletResponse = new LockWalletResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePasswordRequest$Type extends MessageType<ChangePasswordRequest> {
    constructor() {
        super("tdex_daemon.v2.ChangePasswordRequest", [
            { no: 1, name: "current_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangePasswordRequest>): ChangePasswordRequest {
        const message = { currentPassword: "", newPassword: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangePasswordRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangePasswordRequest): ChangePasswordRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string current_password */ 1:
                    message.currentPassword = reader.string();
                    break;
                case /* string new_password */ 2:
                    message.newPassword = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePasswordRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string current_password = 1; */
        if (message.currentPassword !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.currentPassword);
        /* string new_password = 2; */
        if (message.newPassword !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newPassword);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.ChangePasswordRequest
 */
export const ChangePasswordRequest = new ChangePasswordRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePasswordResponse$Type extends MessageType<ChangePasswordResponse> {
    constructor() {
        super("tdex_daemon.v2.ChangePasswordResponse", []);
    }
    create(value?: PartialMessage<ChangePasswordResponse>): ChangePasswordResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangePasswordResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangePasswordResponse): ChangePasswordResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ChangePasswordResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.ChangePasswordResponse
 */
export const ChangePasswordResponse = new ChangePasswordResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStatusRequest$Type extends MessageType<GetStatusRequest> {
    constructor() {
        super("tdex_daemon.v2.GetStatusRequest", []);
    }
    create(value?: PartialMessage<GetStatusRequest>): GetStatusRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStatusRequest): GetStatusRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.GetStatusRequest
 */
export const GetStatusRequest = new GetStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStatusResponse$Type extends MessageType<GetStatusResponse> {
    constructor() {
        super("tdex_daemon.v2.GetStatusResponse", [
            { no: 1, name: "initialized", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "unlocked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "synced", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetStatusResponse>): GetStatusResponse {
        const message = { initialized: false, unlocked: false, synced: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStatusResponse): GetStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool initialized */ 1:
                    message.initialized = reader.bool();
                    break;
                case /* bool unlocked */ 2:
                    message.unlocked = reader.bool();
                    break;
                case /* bool synced */ 3:
                    message.synced = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool initialized = 1; */
        if (message.initialized !== false)
            writer.tag(1, WireType.Varint).bool(message.initialized);
        /* bool unlocked = 2; */
        if (message.unlocked !== false)
            writer.tag(2, WireType.Varint).bool(message.unlocked);
        /* bool synced = 3; */
        if (message.synced !== false)
            writer.tag(3, WireType.Varint).bool(message.synced);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.GetStatusResponse
 */
export const GetStatusResponse = new GetStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetInfoRequest$Type extends MessageType<GetInfoRequest> {
    constructor() {
        super("tdex_daemon.v2.GetInfoRequest", []);
    }
    create(value?: PartialMessage<GetInfoRequest>): GetInfoRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetInfoRequest): GetInfoRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.GetInfoRequest
 */
export const GetInfoRequest = new GetInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetInfoResponse$Type extends MessageType<GetInfoResponse> {
    constructor() {
        super("tdex_daemon.v2.GetInfoResponse", [
            { no: 1, name: "root_path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "master_blinding_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "account_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AccountInfo },
            { no: 4, name: "network", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "build_data", kind: "message", T: () => BuildInfo }
        ]);
    }
    create(value?: PartialMessage<GetInfoResponse>): GetInfoResponse {
        const message = { rootPath: "", masterBlindingKey: "", accountInfo: [], network: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetInfoResponse): GetInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string root_path */ 1:
                    message.rootPath = reader.string();
                    break;
                case /* string master_blinding_key */ 2:
                    message.masterBlindingKey = reader.string();
                    break;
                case /* repeated tdex_daemon.v2.AccountInfo account_info */ 3:
                    message.accountInfo.push(AccountInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string network */ 4:
                    message.network = reader.string();
                    break;
                case /* tdex_daemon.v2.BuildInfo build_data */ 5:
                    message.buildData = BuildInfo.internalBinaryRead(reader, reader.uint32(), options, message.buildData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string root_path = 1; */
        if (message.rootPath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.rootPath);
        /* string master_blinding_key = 2; */
        if (message.masterBlindingKey !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.masterBlindingKey);
        /* repeated tdex_daemon.v2.AccountInfo account_info = 3; */
        for (let i = 0; i < message.accountInfo.length; i++)
            AccountInfo.internalBinaryWrite(message.accountInfo[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string network = 4; */
        if (message.network !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.network);
        /* tdex_daemon.v2.BuildInfo build_data = 5; */
        if (message.buildData)
            BuildInfo.internalBinaryWrite(message.buildData, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.GetInfoResponse
 */
export const GetInfoResponse = new GetInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuildInfo$Type extends MessageType<BuildInfo> {
    constructor() {
        super("tdex_daemon.v2.BuildInfo", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "commit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "date", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BuildInfo>): BuildInfo {
        const message = { version: "", commit: "", date: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuildInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuildInfo): BuildInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* string commit */ 2:
                    message.commit = reader.string();
                    break;
                case /* string date */ 3:
                    message.date = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuildInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* string commit = 2; */
        if (message.commit !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.commit);
        /* string date = 3; */
        if (message.date !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.date);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v2.BuildInfo
 */
export const BuildInfo = new BuildInfo$Type();
/**
 * @generated ServiceType for protobuf service tdex_daemon.v2.WalletService
 */
export const WalletService = new ServiceType("tdex_daemon.v2.WalletService", [
    { name: "GenSeed", options: {}, I: GenSeedRequest, O: GenSeedResponse },
    { name: "InitWallet", serverStreaming: true, options: {}, I: InitWalletRequest, O: InitWalletResponse },
    { name: "UnlockWallet", options: {}, I: UnlockWalletRequest, O: UnlockWalletResponse },
    { name: "LockWallet", options: {}, I: LockWalletRequest, O: LockWalletResponse },
    { name: "ChangePassword", options: {}, I: ChangePasswordRequest, O: ChangePasswordResponse },
    { name: "GetStatus", options: {}, I: GetStatusRequest, O: GetStatusResponse },
    { name: "GetInfo", options: {}, I: GetInfoRequest, O: GetInfoResponse }
]);
