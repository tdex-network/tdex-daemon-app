/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter add_pb_suffix,eslint_disable,ts_nocheck,keep_enum_prefix,long_type_number
// @generated from protobuf file "tdex-daemon/v2/operator.proto" (package "tdex_daemon.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { OperatorService } from "./operator_pb";
import type { ListWithdrawalsResponse } from "./operator_pb";
import type { ListWithdrawalsRequest } from "./operator_pb";
import type { ListDepositsResponse } from "./operator_pb";
import type { ListDepositsRequest } from "./operator_pb";
import type { ListWebhooksResponse } from "./operator_pb";
import type { ListWebhooksRequest } from "./operator_pb";
import type { RemoveWebhookResponse } from "./operator_pb";
import type { RemoveWebhookRequest } from "./operator_pb";
import type { AddWebhookResponse } from "./operator_pb";
import type { AddWebhookRequest } from "./operator_pb";
import type { ListUtxosResponse } from "./operator_pb";
import type { ListUtxosRequest } from "./operator_pb";
import type { ListTradesResponse } from "./operator_pb";
import type { ListTradesRequest } from "./operator_pb";
import type { ListMarketsResponse } from "./operator_pb";
import type { ListMarketsRequest } from "./operator_pb";
import type { WithdrawMarketFragmenterResponse } from "./operator_pb";
import type { WithdrawMarketFragmenterRequest } from "./operator_pb";
import type { MarketFragmenterSplitFundsResponse } from "./operator_pb";
import type { MarketFragmenterSplitFundsRequest } from "./operator_pb";
import type { GetMarketFragmenterBalanceResponse } from "./operator_pb";
import type { GetMarketFragmenterBalanceRequest } from "./operator_pb";
import type { ListMarketFragmenterAddressesResponse } from "./operator_pb";
import type { ListMarketFragmenterAddressesRequest } from "./operator_pb";
import type { DeriveMarketFragmenterAddressesResponse } from "./operator_pb";
import type { DeriveMarketFragmenterAddressesRequest } from "./operator_pb";
import type { WithdrawFeeFragmenterResponse } from "./operator_pb";
import type { WithdrawFeeFragmenterRequest } from "./operator_pb";
import type { FeeFragmenterSplitFundsResponse } from "./operator_pb";
import type { FeeFragmenterSplitFundsRequest } from "./operator_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { GetFeeFragmenterBalanceResponse } from "./operator_pb";
import type { GetFeeFragmenterBalanceRequest } from "./operator_pb";
import type { ListFeeFragmenterAddressesResponse } from "./operator_pb";
import type { ListFeeFragmenterAddressesRequest } from "./operator_pb";
import type { DeriveFeeFragmenterAddressesResponse } from "./operator_pb";
import type { DeriveFeeFragmenterAddressesRequest } from "./operator_pb";
import type { UpdateMarketStrategyResponse } from "./operator_pb";
import type { UpdateMarketStrategyRequest } from "./operator_pb";
import type { UpdateMarketPriceResponse } from "./operator_pb";
import type { UpdateMarketPriceRequest } from "./operator_pb";
import type { UpdateMarketFixedFeeResponse } from "./operator_pb";
import type { UpdateMarketFixedFeeRequest } from "./operator_pb";
import type { UpdateMarketPercentageFeeResponse } from "./operator_pb";
import type { UpdateMarketPercentageFeeRequest } from "./operator_pb";
import type { GetMarketReportResponse } from "./operator_pb";
import type { GetMarketReportRequest } from "./operator_pb";
import type { WithdrawMarketResponse } from "./operator_pb";
import type { WithdrawMarketRequest } from "./operator_pb";
import type { DropMarketResponse } from "./operator_pb";
import type { DropMarketRequest } from "./operator_pb";
import type { CloseMarketResponse } from "./operator_pb";
import type { CloseMarketRequest } from "./operator_pb";
import type { OpenMarketResponse } from "./operator_pb";
import type { OpenMarketRequest } from "./operator_pb";
import type { ListMarketAddressesResponse } from "./operator_pb";
import type { ListMarketAddressesRequest } from "./operator_pb";
import type { DeriveMarketAddressesResponse } from "./operator_pb";
import type { DeriveMarketAddressesRequest } from "./operator_pb";
import type { GetMarketInfoResponse } from "./operator_pb";
import type { GetMarketInfoRequest } from "./operator_pb";
import type { NewMarketResponse } from "./operator_pb";
import type { NewMarketRequest } from "./operator_pb";
import type { WithdrawFeeResponse } from "./operator_pb";
import type { WithdrawFeeRequest } from "./operator_pb";
import type { GetFeeBalanceResponse } from "./operator_pb";
import type { GetFeeBalanceRequest } from "./operator_pb";
import type { ListFeeAddressesResponse } from "./operator_pb";
import type { ListFeeAddressesRequest } from "./operator_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { DeriveFeeAddressesResponse } from "./operator_pb";
import type { DeriveFeeAddressesRequest } from "./operator_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 *
 * Service for operators to configure and manage a TDEX daemon
 *
 * @generated from protobuf service tdex_daemon.v2.OperatorService
 */
export interface IOperatorServiceClient {
    /**
     * Derives new addresses from the fee account.
     * This account is only used to deposit LBTC funds to subsidize network fees.
     *
     * @generated from protobuf rpc: DeriveFeeAddresses(tdex_daemon.v2.DeriveFeeAddressesRequest) returns (tdex_daemon.v2.DeriveFeeAddressesResponse);
     */
    deriveFeeAddresses(input: DeriveFeeAddressesRequest, options?: RpcOptions): UnaryCall<DeriveFeeAddressesRequest, DeriveFeeAddressesResponse>;
    /**
     * Returns the list of all derived addresses for the fee account.
     *
     * @generated from protobuf rpc: ListFeeAddresses(tdex_daemon.v2.ListFeeAddressesRequest) returns (tdex_daemon.v2.ListFeeAddressesResponse);
     */
    listFeeAddresses(input: ListFeeAddressesRequest, options?: RpcOptions): UnaryCall<ListFeeAddressesRequest, ListFeeAddressesResponse>;
    /**
     * Returns the LBTC balance of the fee account.
     *
     * @generated from protobuf rpc: GetFeeBalance(tdex_daemon.v2.GetFeeBalanceRequest) returns (tdex_daemon.v2.GetFeeBalanceResponse);
     */
    getFeeBalance(input: GetFeeBalanceRequest, options?: RpcOptions): UnaryCall<GetFeeBalanceRequest, GetFeeBalanceResponse>;
    /**
     * Withdraws LBTC funds from the fee account.
     *
     * @generated from protobuf rpc: WithdrawFee(tdex_daemon.v2.WithdrawFeeRequest) returns (tdex_daemon.v2.WithdrawFeeResponse);
     */
    withdrawFee(input: WithdrawFeeRequest, options?: RpcOptions): UnaryCall<WithdrawFeeRequest, WithdrawFeeResponse>;
    /**
     * Creates a new market and the related wallet account.
     *
     * @generated from protobuf rpc: NewMarket(tdex_daemon.v2.NewMarketRequest) returns (tdex_daemon.v2.NewMarketResponse);
     */
    newMarket(input: NewMarketRequest, options?: RpcOptions): UnaryCall<NewMarketRequest, NewMarketResponse>;
    /**
     * Returns info about the given market.
     *
     * @generated from protobuf rpc: GetMarketInfo(tdex_daemon.v2.GetMarketInfoRequest) returns (tdex_daemon.v2.GetMarketInfoResponse);
     */
    getMarketInfo(input: GetMarketInfoRequest, options?: RpcOptions): UnaryCall<GetMarketInfoRequest, GetMarketInfoResponse>;
    /**
     * Derives new addresses for the market.
     *
     * @generated from protobuf rpc: DeriveMarketAddresses(tdex_daemon.v2.DeriveMarketAddressesRequest) returns (tdex_daemon.v2.DeriveMarketAddressesResponse);
     */
    deriveMarketAddresses(input: DeriveMarketAddressesRequest, options?: RpcOptions): UnaryCall<DeriveMarketAddressesRequest, DeriveMarketAddressesResponse>;
    /**
     * Returns the list of all derived addresses for the given market.
     *
     * @generated from protobuf rpc: ListMarketAddresses(tdex_daemon.v2.ListMarketAddressesRequest) returns (tdex_daemon.v2.ListMarketAddressesResponse);
     */
    listMarketAddresses(input: ListMarketAddressesRequest, options?: RpcOptions): UnaryCall<ListMarketAddressesRequest, ListMarketAddressesResponse>;
    /**
     * Makes the given market tradable.
     *
     * @generated from protobuf rpc: OpenMarket(tdex_daemon.v2.OpenMarketRequest) returns (tdex_daemon.v2.OpenMarketResponse);
     */
    openMarket(input: OpenMarketRequest, options?: RpcOptions): UnaryCall<OpenMarketRequest, OpenMarketResponse>;
    /**
     * Makes the given market NOT tradabale.
     *
     * @generated from protobuf rpc: CloseMarket(tdex_daemon.v2.CloseMarketRequest) returns (tdex_daemon.v2.CloseMarketResponse);
     */
    closeMarket(input: CloseMarketRequest, options?: RpcOptions): UnaryCall<CloseMarketRequest, CloseMarketResponse>;
    /**
     * Deletes a market.
     *
     * @generated from protobuf rpc: DropMarket(tdex_daemon.v2.DropMarketRequest) returns (tdex_daemon.v2.DropMarketResponse);
     */
    dropMarket(input: DropMarketRequest, options?: RpcOptions): UnaryCall<DropMarketRequest, DropMarketResponse>;
    /**
     * Withdraw funds from the given market.
     *
     * @generated from protobuf rpc: WithdrawMarket(tdex_daemon.v2.WithdrawMarketRequest) returns (tdex_daemon.v2.WithdrawMarketResponse);
     */
    withdrawMarket(input: WithdrawMarketRequest, options?: RpcOptions): UnaryCall<WithdrawMarketRequest, WithdrawMarketResponse>;
    /**
     * Returns a report with volume and collected fees for the given market in
     * the specified time range.
     *
     * @generated from protobuf rpc: GetMarketReport(tdex_daemon.v2.GetMarketReportRequest) returns (tdex_daemon.v2.GetMarketReportResponse);
     */
    getMarketReport(input: GetMarketReportRequest, options?: RpcOptions): UnaryCall<GetMarketReportRequest, GetMarketReportResponse>;
    /**
     * Changes the Liquidity Provider percentage fee for the given market.
     *
     * @generated from protobuf rpc: UpdateMarketPercentageFee(tdex_daemon.v2.UpdateMarketPercentageFeeRequest) returns (tdex_daemon.v2.UpdateMarketPercentageFeeResponse);
     */
    updateMarketPercentageFee(input: UpdateMarketPercentageFeeRequest, options?: RpcOptions): UnaryCall<UpdateMarketPercentageFeeRequest, UpdateMarketPercentageFeeResponse>;
    /**
     * Changes the Liquidity provider fixed fees for the given market.
     *
     * @generated from protobuf rpc: UpdateMarketFixedFee(tdex_daemon.v2.UpdateMarketFixedFeeRequest) returns (tdex_daemon.v2.UpdateMarketFixedFeeResponse);
     */
    updateMarketFixedFee(input: UpdateMarketFixedFeeRequest, options?: RpcOptions): UnaryCall<UpdateMarketFixedFeeRequest, UpdateMarketFixedFeeResponse>;
    /**
     * Updates the price for the given market.
     *
     * @generated from protobuf rpc: UpdateMarketPrice(tdex_daemon.v2.UpdateMarketPriceRequest) returns (tdex_daemon.v2.UpdateMarketPriceResponse);
     */
    updateMarketPrice(input: UpdateMarketPriceRequest, options?: RpcOptions): UnaryCall<UpdateMarketPriceRequest, UpdateMarketPriceResponse>;
    /**
     * Updates the current market making strategy, either using an automated
     * market making formula or a pluggable price feed.
     *
     * @generated from protobuf rpc: UpdateMarketStrategy(tdex_daemon.v2.UpdateMarketStrategyRequest) returns (tdex_daemon.v2.UpdateMarketStrategyResponse);
     */
    updateMarketStrategy(input: UpdateMarketStrategyRequest, options?: RpcOptions): UnaryCall<UpdateMarketStrategyRequest, UpdateMarketStrategyResponse>;
    /**
     * Derives new addresses for the fee fragmenter account.
     *
     * @generated from protobuf rpc: DeriveFeeFragmenterAddresses(tdex_daemon.v2.DeriveFeeFragmenterAddressesRequest) returns (tdex_daemon.v2.DeriveFeeFragmenterAddressesResponse);
     */
    deriveFeeFragmenterAddresses(input: DeriveFeeFragmenterAddressesRequest, options?: RpcOptions): UnaryCall<DeriveFeeFragmenterAddressesRequest, DeriveFeeFragmenterAddressesResponse>;
    /**
     * Returns the list of all derived addresses for the fee fragmenter account.
     *
     * @generated from protobuf rpc: ListFeeFragmenterAddresses(tdex_daemon.v2.ListFeeFragmenterAddressesRequest) returns (tdex_daemon.v2.ListFeeFragmenterAddressesResponse);
     */
    listFeeFragmenterAddresses(input: ListFeeFragmenterAddressesRequest, options?: RpcOptions): UnaryCall<ListFeeFragmenterAddressesRequest, ListFeeFragmenterAddressesResponse>;
    /**
     * Returns the balance of the fee fragmenter account.
     *
     * @generated from protobuf rpc: GetFeeFragmenterBalance(tdex_daemon.v2.GetFeeFragmenterBalanceRequest) returns (tdex_daemon.v2.GetFeeFragmenterBalanceResponse);
     */
    getFeeFragmenterBalance(input: GetFeeFragmenterBalanceRequest, options?: RpcOptions): UnaryCall<GetFeeFragmenterBalanceRequest, GetFeeFragmenterBalanceResponse>;
    /**
     * Splits the funds sent to the fee fragmenter account into multiple
     * fragments that are then deposited to the Fee account.
     *
     * @generated from protobuf rpc: FeeFragmenterSplitFunds(tdex_daemon.v2.FeeFragmenterSplitFundsRequest) returns (stream tdex_daemon.v2.FeeFragmenterSplitFundsResponse);
     */
    feeFragmenterSplitFunds(input: FeeFragmenterSplitFundsRequest, options?: RpcOptions): ServerStreamingCall<FeeFragmenterSplitFundsRequest, FeeFragmenterSplitFundsResponse>;
    /**
     * Withdraws funds from the fee fragmenter account.
     *
     * @generated from protobuf rpc: WithdrawFeeFragmenter(tdex_daemon.v2.WithdrawFeeFragmenterRequest) returns (tdex_daemon.v2.WithdrawFeeFragmenterResponse);
     */
    withdrawFeeFragmenter(input: WithdrawFeeFragmenterRequest, options?: RpcOptions): UnaryCall<WithdrawFeeFragmenterRequest, WithdrawFeeFragmenterResponse>;
    /**
     * Derives new addresses for the market fragmenter account.
     *
     * @generated from protobuf rpc: DeriveMarketFragmenterAddresses(tdex_daemon.v2.DeriveMarketFragmenterAddressesRequest) returns (tdex_daemon.v2.DeriveMarketFragmenterAddressesResponse);
     */
    deriveMarketFragmenterAddresses(input: DeriveMarketFragmenterAddressesRequest, options?: RpcOptions): UnaryCall<DeriveMarketFragmenterAddressesRequest, DeriveMarketFragmenterAddressesResponse>;
    /**
     * Returns the list of all derived addresses for the market fragmenter account.
     *
     * @generated from protobuf rpc: ListMarketFragmenterAddresses(tdex_daemon.v2.ListMarketFragmenterAddressesRequest) returns (tdex_daemon.v2.ListMarketFragmenterAddressesResponse);
     */
    listMarketFragmenterAddresses(input: ListMarketFragmenterAddressesRequest, options?: RpcOptions): UnaryCall<ListMarketFragmenterAddressesRequest, ListMarketFragmenterAddressesResponse>;
    /**
     * Returns the balance of the market fragmenter account.
     *
     * @generated from protobuf rpc: GetMarketFragmenterBalance(tdex_daemon.v2.GetMarketFragmenterBalanceRequest) returns (tdex_daemon.v2.GetMarketFragmenterBalanceResponse);
     */
    getMarketFragmenterBalance(input: GetMarketFragmenterBalanceRequest, options?: RpcOptions): UnaryCall<GetMarketFragmenterBalanceRequest, GetMarketFragmenterBalanceResponse>;
    /**
     * Splits the funds sent to the market fragmenter account into multiple
     * fragments that are then deposited to the given market.
     *
     * @generated from protobuf rpc: MarketFragmenterSplitFunds(tdex_daemon.v2.MarketFragmenterSplitFundsRequest) returns (stream tdex_daemon.v2.MarketFragmenterSplitFundsResponse);
     */
    marketFragmenterSplitFunds(input: MarketFragmenterSplitFundsRequest, options?: RpcOptions): ServerStreamingCall<MarketFragmenterSplitFundsRequest, MarketFragmenterSplitFundsResponse>;
    /**
     * Withdraws funds from the market fragmenter account.
     *
     * @generated from protobuf rpc: WithdrawMarketFragmenter(tdex_daemon.v2.WithdrawMarketFragmenterRequest) returns (tdex_daemon.v2.WithdrawMarketFragmenterResponse);
     */
    withdrawMarketFragmenter(input: WithdrawMarketFragmenterRequest, options?: RpcOptions): UnaryCall<WithdrawMarketFragmenterRequest, WithdrawMarketFragmenterResponse>;
    /**
     * Get info about all markets.
     *
     * @generated from protobuf rpc: ListMarkets(tdex_daemon.v2.ListMarketsRequest) returns (tdex_daemon.v2.ListMarketsResponse);
     */
    listMarkets(input: ListMarketsRequest, options?: RpcOptions): UnaryCall<ListMarketsRequest, ListMarketsResponse>;
    /**
     * Returs all the trades processed by the daemon (ongoing, completed and
     * failed/rejected) or all those filtered by market.
     *
     * @generated from protobuf rpc: ListTrades(tdex_daemon.v2.ListTradesRequest) returns (tdex_daemon.v2.ListTradesResponse);
     */
    listTrades(input: ListTradesRequest, options?: RpcOptions): UnaryCall<ListTradesRequest, ListTradesResponse>;
    /**
     * Returns all the utxos, whether unspents, spents or locked.
     *
     * @generated from protobuf rpc: ListUtxos(tdex_daemon.v2.ListUtxosRequest) returns (tdex_daemon.v2.ListUtxosResponse);
     */
    listUtxos(input: ListUtxosRequest, options?: RpcOptions): UnaryCall<ListUtxosRequest, ListUtxosResponse>;
    /**
     * Adds a webhook registered for some kind of event.
     *
     * @generated from protobuf rpc: AddWebhook(tdex_daemon.v2.AddWebhookRequest) returns (tdex_daemon.v2.AddWebhookResponse);
     */
    addWebhook(input: AddWebhookRequest, options?: RpcOptions): UnaryCall<AddWebhookRequest, AddWebhookResponse>;
    /**
     * Removes some previously added webhook.
     *
     * @generated from protobuf rpc: RemoveWebhook(tdex_daemon.v2.RemoveWebhookRequest) returns (tdex_daemon.v2.RemoveWebhookResponse);
     */
    removeWebhook(input: RemoveWebhookRequest, options?: RpcOptions): UnaryCall<RemoveWebhookRequest, RemoveWebhookResponse>;
    /**
     * Returns registered webhooks
     *
     * @generated from protobuf rpc: ListWebhooks(tdex_daemon.v2.ListWebhooksRequest) returns (tdex_daemon.v2.ListWebhooksResponse);
     */
    listWebhooks(input: ListWebhooksRequest, options?: RpcOptions): UnaryCall<ListWebhooksRequest, ListWebhooksResponse>;
    /**
     * Returns the list of all claimed deposits for the given account.
     *
     * @generated from protobuf rpc: ListDeposits(tdex_daemon.v2.ListDepositsRequest) returns (tdex_daemon.v2.ListDepositsResponse);
     */
    listDeposits(input: ListDepositsRequest, options?: RpcOptions): UnaryCall<ListDepositsRequest, ListDepositsResponse>;
    /**
     * Returns the list of all withdrawals made for the given account.
     *
     * @generated from protobuf rpc: ListWithdrawals(tdex_daemon.v2.ListWithdrawalsRequest) returns (tdex_daemon.v2.ListWithdrawalsResponse);
     */
    listWithdrawals(input: ListWithdrawalsRequest, options?: RpcOptions): UnaryCall<ListWithdrawalsRequest, ListWithdrawalsResponse>;
}
/**
 *
 * Service for operators to configure and manage a TDEX daemon
 *
 * @generated from protobuf service tdex_daemon.v2.OperatorService
 */
export class OperatorServiceClient implements IOperatorServiceClient, ServiceInfo {
    typeName = OperatorService.typeName;
    methods = OperatorService.methods;
    options = OperatorService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Derives new addresses from the fee account.
     * This account is only used to deposit LBTC funds to subsidize network fees.
     *
     * @generated from protobuf rpc: DeriveFeeAddresses(tdex_daemon.v2.DeriveFeeAddressesRequest) returns (tdex_daemon.v2.DeriveFeeAddressesResponse);
     */
    deriveFeeAddresses(input: DeriveFeeAddressesRequest, options?: RpcOptions): UnaryCall<DeriveFeeAddressesRequest, DeriveFeeAddressesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeriveFeeAddressesRequest, DeriveFeeAddressesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the list of all derived addresses for the fee account.
     *
     * @generated from protobuf rpc: ListFeeAddresses(tdex_daemon.v2.ListFeeAddressesRequest) returns (tdex_daemon.v2.ListFeeAddressesResponse);
     */
    listFeeAddresses(input: ListFeeAddressesRequest, options?: RpcOptions): UnaryCall<ListFeeAddressesRequest, ListFeeAddressesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListFeeAddressesRequest, ListFeeAddressesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the LBTC balance of the fee account.
     *
     * @generated from protobuf rpc: GetFeeBalance(tdex_daemon.v2.GetFeeBalanceRequest) returns (tdex_daemon.v2.GetFeeBalanceResponse);
     */
    getFeeBalance(input: GetFeeBalanceRequest, options?: RpcOptions): UnaryCall<GetFeeBalanceRequest, GetFeeBalanceResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFeeBalanceRequest, GetFeeBalanceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Withdraws LBTC funds from the fee account.
     *
     * @generated from protobuf rpc: WithdrawFee(tdex_daemon.v2.WithdrawFeeRequest) returns (tdex_daemon.v2.WithdrawFeeResponse);
     */
    withdrawFee(input: WithdrawFeeRequest, options?: RpcOptions): UnaryCall<WithdrawFeeRequest, WithdrawFeeResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<WithdrawFeeRequest, WithdrawFeeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Creates a new market and the related wallet account.
     *
     * @generated from protobuf rpc: NewMarket(tdex_daemon.v2.NewMarketRequest) returns (tdex_daemon.v2.NewMarketResponse);
     */
    newMarket(input: NewMarketRequest, options?: RpcOptions): UnaryCall<NewMarketRequest, NewMarketResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<NewMarketRequest, NewMarketResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns info about the given market.
     *
     * @generated from protobuf rpc: GetMarketInfo(tdex_daemon.v2.GetMarketInfoRequest) returns (tdex_daemon.v2.GetMarketInfoResponse);
     */
    getMarketInfo(input: GetMarketInfoRequest, options?: RpcOptions): UnaryCall<GetMarketInfoRequest, GetMarketInfoResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMarketInfoRequest, GetMarketInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Derives new addresses for the market.
     *
     * @generated from protobuf rpc: DeriveMarketAddresses(tdex_daemon.v2.DeriveMarketAddressesRequest) returns (tdex_daemon.v2.DeriveMarketAddressesResponse);
     */
    deriveMarketAddresses(input: DeriveMarketAddressesRequest, options?: RpcOptions): UnaryCall<DeriveMarketAddressesRequest, DeriveMarketAddressesResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeriveMarketAddressesRequest, DeriveMarketAddressesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the list of all derived addresses for the given market.
     *
     * @generated from protobuf rpc: ListMarketAddresses(tdex_daemon.v2.ListMarketAddressesRequest) returns (tdex_daemon.v2.ListMarketAddressesResponse);
     */
    listMarketAddresses(input: ListMarketAddressesRequest, options?: RpcOptions): UnaryCall<ListMarketAddressesRequest, ListMarketAddressesResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListMarketAddressesRequest, ListMarketAddressesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Makes the given market tradable.
     *
     * @generated from protobuf rpc: OpenMarket(tdex_daemon.v2.OpenMarketRequest) returns (tdex_daemon.v2.OpenMarketResponse);
     */
    openMarket(input: OpenMarketRequest, options?: RpcOptions): UnaryCall<OpenMarketRequest, OpenMarketResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<OpenMarketRequest, OpenMarketResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Makes the given market NOT tradabale.
     *
     * @generated from protobuf rpc: CloseMarket(tdex_daemon.v2.CloseMarketRequest) returns (tdex_daemon.v2.CloseMarketResponse);
     */
    closeMarket(input: CloseMarketRequest, options?: RpcOptions): UnaryCall<CloseMarketRequest, CloseMarketResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<CloseMarketRequest, CloseMarketResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Deletes a market.
     *
     * @generated from protobuf rpc: DropMarket(tdex_daemon.v2.DropMarketRequest) returns (tdex_daemon.v2.DropMarketResponse);
     */
    dropMarket(input: DropMarketRequest, options?: RpcOptions): UnaryCall<DropMarketRequest, DropMarketResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<DropMarketRequest, DropMarketResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Withdraw funds from the given market.
     *
     * @generated from protobuf rpc: WithdrawMarket(tdex_daemon.v2.WithdrawMarketRequest) returns (tdex_daemon.v2.WithdrawMarketResponse);
     */
    withdrawMarket(input: WithdrawMarketRequest, options?: RpcOptions): UnaryCall<WithdrawMarketRequest, WithdrawMarketResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<WithdrawMarketRequest, WithdrawMarketResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns a report with volume and collected fees for the given market in
     * the specified time range.
     *
     * @generated from protobuf rpc: GetMarketReport(tdex_daemon.v2.GetMarketReportRequest) returns (tdex_daemon.v2.GetMarketReportResponse);
     */
    getMarketReport(input: GetMarketReportRequest, options?: RpcOptions): UnaryCall<GetMarketReportRequest, GetMarketReportResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMarketReportRequest, GetMarketReportResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Changes the Liquidity Provider percentage fee for the given market.
     *
     * @generated from protobuf rpc: UpdateMarketPercentageFee(tdex_daemon.v2.UpdateMarketPercentageFeeRequest) returns (tdex_daemon.v2.UpdateMarketPercentageFeeResponse);
     */
    updateMarketPercentageFee(input: UpdateMarketPercentageFeeRequest, options?: RpcOptions): UnaryCall<UpdateMarketPercentageFeeRequest, UpdateMarketPercentageFeeResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateMarketPercentageFeeRequest, UpdateMarketPercentageFeeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Changes the Liquidity provider fixed fees for the given market.
     *
     * @generated from protobuf rpc: UpdateMarketFixedFee(tdex_daemon.v2.UpdateMarketFixedFeeRequest) returns (tdex_daemon.v2.UpdateMarketFixedFeeResponse);
     */
    updateMarketFixedFee(input: UpdateMarketFixedFeeRequest, options?: RpcOptions): UnaryCall<UpdateMarketFixedFeeRequest, UpdateMarketFixedFeeResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateMarketFixedFeeRequest, UpdateMarketFixedFeeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Updates the price for the given market.
     *
     * @generated from protobuf rpc: UpdateMarketPrice(tdex_daemon.v2.UpdateMarketPriceRequest) returns (tdex_daemon.v2.UpdateMarketPriceResponse);
     */
    updateMarketPrice(input: UpdateMarketPriceRequest, options?: RpcOptions): UnaryCall<UpdateMarketPriceRequest, UpdateMarketPriceResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateMarketPriceRequest, UpdateMarketPriceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Updates the current market making strategy, either using an automated
     * market making formula or a pluggable price feed.
     *
     * @generated from protobuf rpc: UpdateMarketStrategy(tdex_daemon.v2.UpdateMarketStrategyRequest) returns (tdex_daemon.v2.UpdateMarketStrategyResponse);
     */
    updateMarketStrategy(input: UpdateMarketStrategyRequest, options?: RpcOptions): UnaryCall<UpdateMarketStrategyRequest, UpdateMarketStrategyResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateMarketStrategyRequest, UpdateMarketStrategyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Derives new addresses for the fee fragmenter account.
     *
     * @generated from protobuf rpc: DeriveFeeFragmenterAddresses(tdex_daemon.v2.DeriveFeeFragmenterAddressesRequest) returns (tdex_daemon.v2.DeriveFeeFragmenterAddressesResponse);
     */
    deriveFeeFragmenterAddresses(input: DeriveFeeFragmenterAddressesRequest, options?: RpcOptions): UnaryCall<DeriveFeeFragmenterAddressesRequest, DeriveFeeFragmenterAddressesResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeriveFeeFragmenterAddressesRequest, DeriveFeeFragmenterAddressesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the list of all derived addresses for the fee fragmenter account.
     *
     * @generated from protobuf rpc: ListFeeFragmenterAddresses(tdex_daemon.v2.ListFeeFragmenterAddressesRequest) returns (tdex_daemon.v2.ListFeeFragmenterAddressesResponse);
     */
    listFeeFragmenterAddresses(input: ListFeeFragmenterAddressesRequest, options?: RpcOptions): UnaryCall<ListFeeFragmenterAddressesRequest, ListFeeFragmenterAddressesResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListFeeFragmenterAddressesRequest, ListFeeFragmenterAddressesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the balance of the fee fragmenter account.
     *
     * @generated from protobuf rpc: GetFeeFragmenterBalance(tdex_daemon.v2.GetFeeFragmenterBalanceRequest) returns (tdex_daemon.v2.GetFeeFragmenterBalanceResponse);
     */
    getFeeFragmenterBalance(input: GetFeeFragmenterBalanceRequest, options?: RpcOptions): UnaryCall<GetFeeFragmenterBalanceRequest, GetFeeFragmenterBalanceResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFeeFragmenterBalanceRequest, GetFeeFragmenterBalanceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Splits the funds sent to the fee fragmenter account into multiple
     * fragments that are then deposited to the Fee account.
     *
     * @generated from protobuf rpc: FeeFragmenterSplitFunds(tdex_daemon.v2.FeeFragmenterSplitFundsRequest) returns (stream tdex_daemon.v2.FeeFragmenterSplitFundsResponse);
     */
    feeFragmenterSplitFunds(input: FeeFragmenterSplitFundsRequest, options?: RpcOptions): ServerStreamingCall<FeeFragmenterSplitFundsRequest, FeeFragmenterSplitFundsResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<FeeFragmenterSplitFundsRequest, FeeFragmenterSplitFundsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Withdraws funds from the fee fragmenter account.
     *
     * @generated from protobuf rpc: WithdrawFeeFragmenter(tdex_daemon.v2.WithdrawFeeFragmenterRequest) returns (tdex_daemon.v2.WithdrawFeeFragmenterResponse);
     */
    withdrawFeeFragmenter(input: WithdrawFeeFragmenterRequest, options?: RpcOptions): UnaryCall<WithdrawFeeFragmenterRequest, WithdrawFeeFragmenterResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<WithdrawFeeFragmenterRequest, WithdrawFeeFragmenterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Derives new addresses for the market fragmenter account.
     *
     * @generated from protobuf rpc: DeriveMarketFragmenterAddresses(tdex_daemon.v2.DeriveMarketFragmenterAddressesRequest) returns (tdex_daemon.v2.DeriveMarketFragmenterAddressesResponse);
     */
    deriveMarketFragmenterAddresses(input: DeriveMarketFragmenterAddressesRequest, options?: RpcOptions): UnaryCall<DeriveMarketFragmenterAddressesRequest, DeriveMarketFragmenterAddressesResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeriveMarketFragmenterAddressesRequest, DeriveMarketFragmenterAddressesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the list of all derived addresses for the market fragmenter account.
     *
     * @generated from protobuf rpc: ListMarketFragmenterAddresses(tdex_daemon.v2.ListMarketFragmenterAddressesRequest) returns (tdex_daemon.v2.ListMarketFragmenterAddressesResponse);
     */
    listMarketFragmenterAddresses(input: ListMarketFragmenterAddressesRequest, options?: RpcOptions): UnaryCall<ListMarketFragmenterAddressesRequest, ListMarketFragmenterAddressesResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListMarketFragmenterAddressesRequest, ListMarketFragmenterAddressesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the balance of the market fragmenter account.
     *
     * @generated from protobuf rpc: GetMarketFragmenterBalance(tdex_daemon.v2.GetMarketFragmenterBalanceRequest) returns (tdex_daemon.v2.GetMarketFragmenterBalanceResponse);
     */
    getMarketFragmenterBalance(input: GetMarketFragmenterBalanceRequest, options?: RpcOptions): UnaryCall<GetMarketFragmenterBalanceRequest, GetMarketFragmenterBalanceResponse> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMarketFragmenterBalanceRequest, GetMarketFragmenterBalanceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Splits the funds sent to the market fragmenter account into multiple
     * fragments that are then deposited to the given market.
     *
     * @generated from protobuf rpc: MarketFragmenterSplitFunds(tdex_daemon.v2.MarketFragmenterSplitFundsRequest) returns (stream tdex_daemon.v2.MarketFragmenterSplitFundsResponse);
     */
    marketFragmenterSplitFunds(input: MarketFragmenterSplitFundsRequest, options?: RpcOptions): ServerStreamingCall<MarketFragmenterSplitFundsRequest, MarketFragmenterSplitFundsResponse> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<MarketFragmenterSplitFundsRequest, MarketFragmenterSplitFundsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Withdraws funds from the market fragmenter account.
     *
     * @generated from protobuf rpc: WithdrawMarketFragmenter(tdex_daemon.v2.WithdrawMarketFragmenterRequest) returns (tdex_daemon.v2.WithdrawMarketFragmenterResponse);
     */
    withdrawMarketFragmenter(input: WithdrawMarketFragmenterRequest, options?: RpcOptions): UnaryCall<WithdrawMarketFragmenterRequest, WithdrawMarketFragmenterResponse> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<WithdrawMarketFragmenterRequest, WithdrawMarketFragmenterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get info about all markets.
     *
     * @generated from protobuf rpc: ListMarkets(tdex_daemon.v2.ListMarketsRequest) returns (tdex_daemon.v2.ListMarketsResponse);
     */
    listMarkets(input: ListMarketsRequest, options?: RpcOptions): UnaryCall<ListMarketsRequest, ListMarketsResponse> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListMarketsRequest, ListMarketsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returs all the trades processed by the daemon (ongoing, completed and
     * failed/rejected) or all those filtered by market.
     *
     * @generated from protobuf rpc: ListTrades(tdex_daemon.v2.ListTradesRequest) returns (tdex_daemon.v2.ListTradesResponse);
     */
    listTrades(input: ListTradesRequest, options?: RpcOptions): UnaryCall<ListTradesRequest, ListTradesResponse> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTradesRequest, ListTradesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns all the utxos, whether unspents, spents or locked.
     *
     * @generated from protobuf rpc: ListUtxos(tdex_daemon.v2.ListUtxosRequest) returns (tdex_daemon.v2.ListUtxosResponse);
     */
    listUtxos(input: ListUtxosRequest, options?: RpcOptions): UnaryCall<ListUtxosRequest, ListUtxosResponse> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListUtxosRequest, ListUtxosResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Adds a webhook registered for some kind of event.
     *
     * @generated from protobuf rpc: AddWebhook(tdex_daemon.v2.AddWebhookRequest) returns (tdex_daemon.v2.AddWebhookResponse);
     */
    addWebhook(input: AddWebhookRequest, options?: RpcOptions): UnaryCall<AddWebhookRequest, AddWebhookResponse> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddWebhookRequest, AddWebhookResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Removes some previously added webhook.
     *
     * @generated from protobuf rpc: RemoveWebhook(tdex_daemon.v2.RemoveWebhookRequest) returns (tdex_daemon.v2.RemoveWebhookResponse);
     */
    removeWebhook(input: RemoveWebhookRequest, options?: RpcOptions): UnaryCall<RemoveWebhookRequest, RemoveWebhookResponse> {
        const method = this.methods[31], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveWebhookRequest, RemoveWebhookResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns registered webhooks
     *
     * @generated from protobuf rpc: ListWebhooks(tdex_daemon.v2.ListWebhooksRequest) returns (tdex_daemon.v2.ListWebhooksResponse);
     */
    listWebhooks(input: ListWebhooksRequest, options?: RpcOptions): UnaryCall<ListWebhooksRequest, ListWebhooksResponse> {
        const method = this.methods[32], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListWebhooksRequest, ListWebhooksResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the list of all claimed deposits for the given account.
     *
     * @generated from protobuf rpc: ListDeposits(tdex_daemon.v2.ListDepositsRequest) returns (tdex_daemon.v2.ListDepositsResponse);
     */
    listDeposits(input: ListDepositsRequest, options?: RpcOptions): UnaryCall<ListDepositsRequest, ListDepositsResponse> {
        const method = this.methods[33], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDepositsRequest, ListDepositsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the list of all withdrawals made for the given account.
     *
     * @generated from protobuf rpc: ListWithdrawals(tdex_daemon.v2.ListWithdrawalsRequest) returns (tdex_daemon.v2.ListWithdrawalsResponse);
     */
    listWithdrawals(input: ListWithdrawalsRequest, options?: RpcOptions): UnaryCall<ListWithdrawalsRequest, ListWithdrawalsResponse> {
        const method = this.methods[34], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListWithdrawalsRequest, ListWithdrawalsResponse>("unary", this._transport, method, opt, input);
    }
}
