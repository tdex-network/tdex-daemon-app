/* eslint-disable */
// @generated by protobuf-ts 2.7.0 with parameter add_pb_suffix,eslint_disable,ts_nocheck,keep_enum_prefix,long_type_number
// @generated from protobuf file "tdex-daemon/v1/wallet.proto" (package "tdex_daemon.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BalanceInfo } from "./types_pb";
import { TxOutput } from "./types_pb";
/**
 * @generated from protobuf message tdex_daemon.v1.SendToManyRequest
 */
export interface SendToManyRequest {
    /**
     * A slice of the outputs that should be created in the transaction produced.
     *
     * @generated from protobuf field: repeated tdex_daemon.v1.TxOutput outputs = 1;
     */
    outputs: TxOutput[];
    /**
     * The number of millisatoshis per byte that should be used when crafting
     * this transaction.
     *
     * @generated from protobuf field: int64 millisat_per_byte = 2;
     */
    millisatPerByte: number;
}
/**
 * @generated from protobuf message tdex_daemon.v1.SendToManyResponse
 */
export interface SendToManyResponse {
    /**
     * The serialized transaction sent out on the network.
     *
     * @generated from protobuf field: bytes raw_tx = 1;
     */
    rawTx: Uint8Array;
    /**
     * The id of the broadcasted transaction.
     *
     * @generated from protobuf field: bytes txid = 2;
     */
    txid: Uint8Array;
}
/**
 * @generated from protobuf message tdex_daemon.v1.WalletAddressRequest
 */
export interface WalletAddressRequest {
}
/**
 * @generated from protobuf message tdex_daemon.v1.WalletAddressResponse
 */
export interface WalletAddressResponse {
    /**
     * The confidential address encoded using a blech32 format.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * The blinding private key for the given address encoded in hex format
     *
     * @generated from protobuf field: string blinding = 2;
     */
    blinding: string;
}
/**
 * @generated from protobuf message tdex_daemon.v1.WalletBalanceRequest
 */
export interface WalletBalanceRequest {
}
/**
 * @generated from protobuf message tdex_daemon.v1.WalletBalanceResponse
 */
export interface WalletBalanceResponse {
    /**
     * The balance info (total, confirmed, unconfirmed) of the wallet grouped by
     * asset
     *
     * @generated from protobuf field: map<string, tdex_daemon.v1.BalanceInfo> balance = 1;
     */
    balance: {
        [key: string]: BalanceInfo;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class SendToManyRequest$Type extends MessageType<SendToManyRequest> {
    constructor() {
        super("tdex_daemon.v1.SendToManyRequest", [
            { no: 1, name: "outputs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TxOutput },
            { no: 2, name: "millisat_per_byte", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<SendToManyRequest>): SendToManyRequest {
        const message = { outputs: [], millisatPerByte: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendToManyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendToManyRequest): SendToManyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tdex_daemon.v1.TxOutput outputs */ 1:
                    message.outputs.push(TxOutput.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 millisat_per_byte */ 2:
                    message.millisatPerByte = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendToManyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated tdex_daemon.v1.TxOutput outputs = 1; */
        for (let i = 0; i < message.outputs.length; i++)
            TxOutput.internalBinaryWrite(message.outputs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 millisat_per_byte = 2; */
        if (message.millisatPerByte !== 0)
            writer.tag(2, WireType.Varint).int64(message.millisatPerByte);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v1.SendToManyRequest
 */
export const SendToManyRequest = new SendToManyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendToManyResponse$Type extends MessageType<SendToManyResponse> {
    constructor() {
        super("tdex_daemon.v1.SendToManyResponse", [
            { no: 1, name: "raw_tx", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "txid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SendToManyResponse>): SendToManyResponse {
        const message = { rawTx: new Uint8Array(0), txid: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendToManyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendToManyResponse): SendToManyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes raw_tx */ 1:
                    message.rawTx = reader.bytes();
                    break;
                case /* bytes txid */ 2:
                    message.txid = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendToManyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes raw_tx = 1; */
        if (message.rawTx.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.rawTx);
        /* bytes txid = 2; */
        if (message.txid.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.txid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v1.SendToManyResponse
 */
export const SendToManyResponse = new SendToManyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WalletAddressRequest$Type extends MessageType<WalletAddressRequest> {
    constructor() {
        super("tdex_daemon.v1.WalletAddressRequest", []);
    }
    create(value?: PartialMessage<WalletAddressRequest>): WalletAddressRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WalletAddressRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WalletAddressRequest): WalletAddressRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WalletAddressRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v1.WalletAddressRequest
 */
export const WalletAddressRequest = new WalletAddressRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WalletAddressResponse$Type extends MessageType<WalletAddressResponse> {
    constructor() {
        super("tdex_daemon.v1.WalletAddressResponse", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "blinding", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WalletAddressResponse>): WalletAddressResponse {
        const message = { address: "", blinding: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WalletAddressResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WalletAddressResponse): WalletAddressResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* string blinding */ 2:
                    message.blinding = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WalletAddressResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* string blinding = 2; */
        if (message.blinding !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.blinding);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v1.WalletAddressResponse
 */
export const WalletAddressResponse = new WalletAddressResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WalletBalanceRequest$Type extends MessageType<WalletBalanceRequest> {
    constructor() {
        super("tdex_daemon.v1.WalletBalanceRequest", []);
    }
    create(value?: PartialMessage<WalletBalanceRequest>): WalletBalanceRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WalletBalanceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WalletBalanceRequest): WalletBalanceRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WalletBalanceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v1.WalletBalanceRequest
 */
export const WalletBalanceRequest = new WalletBalanceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WalletBalanceResponse$Type extends MessageType<WalletBalanceResponse> {
    constructor() {
        super("tdex_daemon.v1.WalletBalanceResponse", [
            { no: 1, name: "balance", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => BalanceInfo } }
        ]);
    }
    create(value?: PartialMessage<WalletBalanceResponse>): WalletBalanceResponse {
        const message = { balance: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WalletBalanceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WalletBalanceResponse): WalletBalanceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, tdex_daemon.v1.BalanceInfo> balance */ 1:
                    this.binaryReadMap1(message.balance, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: WalletBalanceResponse["balance"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WalletBalanceResponse["balance"] | undefined, val: WalletBalanceResponse["balance"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = BalanceInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tdex_daemon.v1.WalletBalanceResponse.balance");
            }
        }
        map[key ?? ""] = val ?? BalanceInfo.create();
    }
    internalBinaryWrite(message: WalletBalanceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, tdex_daemon.v1.BalanceInfo> balance = 1; */
        for (let k of Object.keys(message.balance)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            BalanceInfo.internalBinaryWrite(message.balance[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tdex_daemon.v1.WalletBalanceResponse
 */
export const WalletBalanceResponse = new WalletBalanceResponse$Type();
/**
 * @generated ServiceType for protobuf service tdex_daemon.v1.WalletService
 */
export const WalletService = new ServiceType("tdex_daemon.v1.WalletService", [
    { name: "WalletAddress", options: {}, I: WalletAddressRequest, O: WalletAddressResponse },
    { name: "WalletBalance", options: {}, I: WalletBalanceRequest, O: WalletBalanceResponse },
    { name: "SendToMany", options: {}, I: SendToManyRequest, O: SendToManyResponse }
]);
